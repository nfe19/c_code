/*
 *   HW ASSIGNMENT: GPGM0
 *   EEL-4746 Fall 2021
 *   Najeeb Eeso
 *   Date written: 9/19/21
 *   First EEL-4746 C Program
 */

// Standard Includes

#include "driverlib.h"
#include <stdint.h>
#include <stdio.h>
#include <eusci_b_i2c.h>
// files for BCUART functions
#include <stdbool.h>
#include "HAL_UART_4746.h"
#include <HAL_FR5994_OPT3001.h>

void GPIO_init(void);

//  Main Function
void main(void){

    // Halt the WatchDog Timer
    WDT_A_hold(WDT_A_BASE);

    // Activate new port configurations
    PMM_unlockLPM5();

    //initialize LED0 and set it to LOW
    GPIO_setAsOutputPin(GPIO_PORT_P1, GPIO_PIN0); // initialize
    GPIO_setOutputLowOnPin(GPIO_PORT_P1, GPIO_PIN0); // set as low

    //Set 7.1 and 7.0 as I2C peripherals
    GPIO_setAsPeripheralModuleFunctionOutputPin(GPIO_PORT_P7, GPIO_PIN0, GPIO_PRIMARY_MODULE_FUNCTION);
    GPIO_setAsPeripheralModuleFunctionOutputPin(GPIO_PORT_P7, GPIO_PIN1, GPIO_PRIMARY_MODULE_FUNCTION);

    PMM_unlockLPM5();

    EUSCI_B_I2C_initMasterParam i2cConfigPersonal =
    {
            EUSCI_B_I2C_CLOCKSOURCE_SMCLK,          // SMCLK Clock Source
            10000000,                               // SMCLK = 1.00MHzMHz
            EUSCI_B_I2C_SET_DATA_RATE_400KBPS,      // Desired I2C Clock of 100khz
    };

    EUSCI_B_I2C_disable(EUSCI_B2_BASE);
    EUSCI_B_I2C_initMaster(EUSCI_B2_BASE, &i2cConfigPersonal);    //initialize with parameters
    EUSCI_B_I2C_enable(EUSCI_B2_BASE);  //enable i2c

    OPT3001_init(0x44);
    volatile uint16_t mId = 0;
    volatile uint32_t dataObtained = 0;
    while(1){
        mId = OPT3001_readManufacturerId(0x44);  //send the data, expect <start> <address> <ACK> <register address> <ACK> <data> <ACK> <end>
        dataObtained = OPT3001_getLux(0x44);
        __delay_cycles(10000);    //Toggle PIN to indicate data was sent
        GPIO_toggleOutputOnPin(GPIO_PORT_P1, GPIO_PIN0);                    //delay
    }

}
static void init_hardware( void )
{

    //Disable internal watchdog timer
    WDTCTL = WDTPW | WDTHOLD;

    //This block initializes the i2c peripheral
    //Configure pins P7.0 (SDA) and P7.1 (SCL) for I2C (secondary module functionality)
    GPIO_setAsPeripheralModuleFunctionInputPin( GPIO_PORT_P7, ( GPIO_PIN0 | GPIO_PIN1 ), GPIO_PRIMARY_MODULE_FUNCTION );


    PMM_unlockLPM5(); //Clear the LOCKLPM5 bit so the GPIO and i2c configuration takes effect

    //Configure the I2C bus
    EUSCI_B_I2C_initMasterParam i2c_master_init_param = {0};
    i2c_master_init_param.selectClockSource      = EUSCI_B_I2C_CLOCKSOURCE_SMCLK;       //use SMCLK clock signal
    i2c_master_init_param.i2cClk                 = CS_getSMCLK();                       //Give SMCLK freq in Hz
    i2c_master_init_param.dataRate               = EUSCI_B_I2C_SET_DATA_RATE_100KBPS;   //100KBps datarate
    i2c_master_init_param.byteCounterThreshold   = 0;                                   //Don't care because 'no auto stop'
    i2c_master_init_param.autoSTOPGeneration     = EUSCI_B_I2C_NO_AUTO_STOP;            //We will handle the stop bit manually
    EUSCI_B_I2C_initMaster( EUSCI_B2_BASE, &i2c_master_init_param );

    EUSCI_B_I2C_enable(EUSCI_B2_BASE);  //Enable the I2C bus (i.e. pull it out of reset state)

}

/* Initializes GPIO */
void GPIO_init(){
    /* Terminate all GPIO pins to Output LOW to minimize power consumption */
    GPIO_setAsOutputPin(GPIO_PORT_PA, GPIO_PIN_ALL16);
    GPIO_setAsOutputPin(GPIO_PORT_PB, GPIO_PIN_ALL16);
    GPIO_setAsOutputPin(GPIO_PORT_PC, GPIO_PIN_ALL16);
    GPIO_setAsOutputPin(GPIO_PORT_PD, GPIO_PIN_ALL16);
    GPIO_setAsOutputPin(GPIO_PORT_PE, GPIO_PIN_ALL16);
    GPIO_setAsOutputPin(GPIO_PORT_PF, GPIO_PIN_ALL16);
    GPIO_setOutputLowOnPin(GPIO_PORT_PA, GPIO_PIN_ALL16);
    GPIO_setOutputLowOnPin(GPIO_PORT_PB, GPIO_PIN_ALL16);
    GPIO_setOutputLowOnPin(GPIO_PORT_PC, GPIO_PIN_ALL16);
    GPIO_setOutputLowOnPin(GPIO_PORT_PD, GPIO_PIN_ALL16);
    GPIO_setOutputLowOnPin(GPIO_PORT_PE, GPIO_PIN_ALL16);
    GPIO_setOutputLowOnPin(GPIO_PORT_PF, GPIO_PIN_ALL16);

    // Disable the GPIO power-on default high-impedance mode
    // to activate previously configured port settings
    PMM_unlockLPM5();
}
